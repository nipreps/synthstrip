name: Build & test

on:
  push:
    branches:
    - main
    tags:
    - "*"
  pull_request:
    branches:
    - main
  schedule:
  - cron: '0 0 * * 1'

defaults:
  run:
    shell: bash

concurrency:
  group: python-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  job_metadata:
    if: github.repository == 'nipreps/synthstrip'
    runs-on: ubuntu-latest
    outputs:
      commit_message: ${{ steps.get_commit_message.outputs.commit_message }}
      version: ${{ steps.show_version.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Print head git commit message
      id: get_commit_message
      run: |
        if [[ -z "$COMMIT_MSG" ]]; then
          COMMIT_MSG=$(git show -s --format=%s $REF)
        fi
        echo commit_message=$COMMIT_MSG | tee -a $GITHUB_OUTPUT
      env:
        COMMIT_MSG: ${{ github.event.head_commit.message }}
        REF: ${{ github.event.pull_request.head.sha }}
    - name: Detect version
      id: show_version
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF##*/}
        else
          pipx run hatch version  # Once to avoid output of initial setup
          VERSION=$( pipx run hatch version )
        fi
        echo version=$VERSION | tee -a $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3
    - name: Display Python information
      run: python -c "import sys; print(sys.version)"
    - name: Build sdist and wheel
      run: pipx run build
    - name: Check release tools
      run: pipx run twine check dist/*
    - name: Save build output
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test:
    needs: [job_metadata, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        install: [repo]
        include:
        - python-version: "3.12"
          install: sdist
        - python-version: "3.12"
          install: wheel
        - python-version: "3.12"
          install: editable
    env:
      INSTALL_TYPE: ${{ matrix.install }}
    steps:
    - uses: actions/checkout@v4
      if: matrix.install == 'repo' || matrix.install == 'editable'
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Fetch packages
      if: matrix.install == 'sdist' || matrix.install == 'wheel'
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    - name: Select archive
      run: |
        if [ "$INSTALL_TYPE" = "sdist" ]; then
          ARCHIVE=$( ls dist/*.tar.gz )
        elif [ "$INSTALL_TYPE" = "wheel" ]; then
          ARCHIVE=$( ls dist/*.whl )
        elif [ "$INSTALL_TYPE" = "repo" ]; then
          ARCHIVE="."
        elif [ "$INSTALL_TYPE" = "editable" ]; then
          ARCHIVE="-e ."
        fi
        echo "ARCHIVE=$ARCHIVE" | tee -a $GITHUB_ENV
    - name: Install package
      run: python -m pip install $ARCHIVE
    - name: Check version
      run: |
        INSTALLED_VERSION=$(python -c 'from nipreps.synthstrip import __version__; print(__version__, end="")')
        echo "INSTALLED: \"${INSTALLED_VERSION}\""
        test "${INSTALLED_VERSION}" = "${VERSION}"
      env:
        VERSION: ${{ needs.job_metadata.outputs.version }}
    - name: Ensure CLI tool is available
      run: nipreps-synthstrip -h

  publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.repository == 'nipreps/synthstrip' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
